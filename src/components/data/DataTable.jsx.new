
import React, { useState, useMemo } from 'react';
import { cn } from '../../utils/cn';
import { usePagination } from '../../hooks/usePagination';

/**
 * DataTable component for displaying tabular data with sorting and pagination
 */
export default function DataTable({
  data = [],
  columns = [],
  pagination = true,
  initialSort = null,
  initialSortDirection = 'asc',
  onRowClick,
  rowClassName,
  className,
  emptyMessage = 'No data available',
  pageSize = 10,
  pageSizeOptions = [10, 25, 50, 100],
  loading = false,
}) {
  // State for sorting
  const [sortBy, setSortBy] = useState(initialSort);
  const [sortDirection, setSortDirection] = useState(initialSortDirection);

  // Initialize pagination
  const pagination$ = usePagination({
    initialPageSize: pageSize,
    pageSizeOptions,
    totalItems: data.length,
  });

  // Handle sort click
  const handleSort = (columnId) => {
    if (sortBy === columnId) {
      // Toggle direction if already sorting by this column
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      // Set new sort column and reset direction to asc
      setSortBy(columnId);
      setSortDirection('asc');
    }
  };

  // Sort and paginate data
  const processedData = useMemo(() => {
    // First sort the data
    let sortedData = [...data];

    if (sortBy) {
      const sortColumn = columns.find(col => col.id === sortBy);

      if (sortColumn && sortColumn.sortable !== false) {
        sortedData.sort((a, b) => {
          let aValue = a[sortBy];
          let bValue = b[sortBy];

          // Use sortAccessor if available
          if (sortColumn.sortAccessor) {
            aValue = sortColumn.sortAccessor(a);
            bValue = sortColumn.sortAccessor(b);
          } else if (sortColumn.accessor) {
            aValue = sortColumn.accessor(a);
            bValue = sortColumn.accessor(b);
          }

          // Handle undefined/null values
          if (aValue == null) return sortDirection === 'asc' ? -1 : 1;
          if (bValue == null) return sortDirection === 'asc' ? 1 : -1;

          // Compare based on value type
          if (typeof aValue === 'string') {
            return sortDirection === 'asc' 
              ? aValue.localeCompare(bValue)
              : bValue.localeCompare(aValue);
          }

          // Numeric comparison
          return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;
        });
      }
    }

    // Then paginate if enabled
    if (pagination) {
      return pagination$.getPageItems(sortedData);
    }

    return sortedData;
  }, [data, columns, sortBy, sortDirection, pagination, pagination$]);

  // Empty state
  if (data.length === 0) {
    return (
      <div className="bg-white border rounded-lg overflow-hidden">
        <div className="flex items-center justify-center h-48 text-gray-500">
          {loading ? (
            <div className="flex flex-col items-center">
              <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mb-2"></div>
              <span>Loading data...</span>
            </div>
          ) : (
            emptyMessage
          )}
        </div>
      </div>
    );
  }

  return (
    <div className={cn('bg-white rounded-lg overflow-hidden border border-gray-200', className)}>
      {/* Table */}
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          {/* Table Header */}
          <thead className="bg-gray-50">
            <tr>
              {columns.map((column) => (
                <th
                  key={column.id}
                  scope="col"
                  className={cn(
                    'px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider',
                    column.sortable !== false ? 'cursor-pointer hover:bg-gray-100' : '',
                    column.headerClassName
                  )}
                  style={column.width ? { width: column.width } : {}}
                  onClick={() => column.sortable !== false && handleSort(column.id)}
                >
                  <div className="flex items-center space-x-1">
                    <span>{column.header}</span>
                    {column.sortable !== false && sortBy === column.id && (
                      <span>
                        {sortDirection === 'asc' ? (
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                          </svg>
                        ) : (
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                          </svg>
                        )}
                      </span>
                    )}
                  </div>
                </th>
              ))}
            </tr>
          </thead>

          {/* Table Body */}
          <tbody className="bg-white divide-y divide-gray-200">
            {loading ? (
              // Loading state
              <tr>
                <td colSpan={columns.length} className="px-6 py-4">
                  <div className="flex justify-center items-center h-20">
                    <div className="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-500"></div>
                    <span className="ml-2">Loading...</span>
                  </div>
                </td>
              </tr>
            ) : (
              // Data rows
              processedData.map((row, rowIndex) => (
                <tr
                  key={row.id || rowIndex}
                  className={cn(
                    onRowClick ? 'cursor-pointer hover:bg-gray-50' : '',
                    typeof rowClassName === 'function' ? rowClassName(row, rowIndex) : rowClassName
                  )}
                  onClick={() => onRowClick && onRowClick(row, rowIndex)}
                >
                  {columns.map((column, colIndex) => (
                    <td
                      key={`${rowIndex}-${column.id || colIndex}`}
                      className={cn(
                        'px-6 py-4 whitespace-nowrap text-sm',
                        column.cellClassName
                      )}
                    >
                      {column.accessor
                        ? column.accessor(row, rowIndex)
                        : row[column.id]
                      }
                    </td>
                  ))}
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {pagination && (
        <div className="border-t border-gray-200 px-4 py-3 sm:px-6 flex flex-col sm:flex-row sm:items-center sm:justify-between">
          {/* Info text */}
          <div className="text-sm text-gray-700 mb-4 sm:mb-0">
            Showing{' '}
            <span className="font-medium">{pagination$.pageInfo.startItem}</span>
            {' '}-{' '}
            <span className="font-medium">{pagination$.pageInfo.endItem}</span>
            {' '}of{' '}
            <span className="font-medium">{pagination$.pageInfo.totalItems}</span>
            {' '}results
          </div>

          <div className="flex justify-between sm:justify-end items-center space-x-2">
            {/* Page size selector */}
            <div className="flex items-center space-x-2 mr-8">
              <label htmlFor="pageSize" className="text-sm text-gray-700">
                Rows per page:
              </label>
              <select
                id="pageSize"
                className="border border-gray-300 rounded-md py-1 pl-2 pr-8 text-sm"
                value={pagination$.pageSize}
                onChange={(e) => pagination$.changePageSize(Number(e.target.value))}
              >
                {pagination$.pageSizeOptions.map((size) => (
                  <option key={size} value={size}>
                    {size}
                  </option>
                ))}
              </select>
            </div>

            {/* Page navigation */}
            <nav className="flex items-center space-x-1">
              {/* First page button */}
              <button
                onClick={pagination$.firstPage}
                disabled={!pagination$.pageInfo.hasPrevPage}
                className={cn(
                  'px-2 py-1 text-sm rounded-md',
                  pagination$.pageInfo.hasPrevPage
                    ? 'text-gray-700 hover:bg-gray-100'
                    : 'text-gray-400 cursor-not-allowed'
                )}
              >
                <span className="sr-only">First</span>
                <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path fillRule="evenodd" d="M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 010 1.414zm-6 0a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L5.414 10l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" />
                </svg>
              </button>

              {/* Previous page button */}
              <button
                onClick={pagination$.prevPage}
                disabled={!pagination$.pageInfo.hasPrevPage}
                className={cn(
                  'px-2 py-1 text-sm rounded-md',
                  pagination$.pageInfo.hasPrevPage
                    ? 'text-gray-700 hover:bg-gray-100'
                    : 'text-gray-400 cursor-not-allowed'
                )}
              >
                <span className="sr-only">Previous</span>
                <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
              </button>

              {/* Page number buttons */}
              {pagination$.paginationRange.map((pageNumber, index) => (
                <button
                  key={index}
                  onClick={() => {
                    if (pageNumber !== '...') {
                      pagination$.goToPage(pageNumber);
                    }
                  }}
                  disabled={pageNumber === '...'}
                  className={cn(
                    'px-3 py-1 text-sm rounded-md',
                    pageNumber === pagination$.page
                      ? 'bg-blue-50 text-blue-600 font-medium'
                      : pageNumber === '...'
                      ? 'text-gray-400 cursor-default'
                      : 'text-gray-700 hover:bg-gray-100'
                  )}
                >
                  {pageNumber}
                </button>
              ))}

              {/* Next page button */}
              <button
                onClick={pagination$.nextPage}
                disabled={!pagination$.pageInfo.hasNextPage}
                className={cn(
                  'px-2 py-1 text-sm rounded-md',
                  pagination$.pageInfo.hasNextPage
                    ? 'text-gray-700 hover:bg-gray-100'
                    : 'text-gray-400 cursor-not-allowed'
                )}
              >
                <span className="sr-only">Next</span>
                <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                </svg>
              </button>

              {/* Last page button */}
              <button
                onClick={pagination$.lastPage}
                disabled={!pagination$.pageInfo.hasNextPage}
                className={cn(
                  'px-2 py-1 text-sm rounded-md',
                  pagination$.pageInfo.hasNextPage
                    ? 'text-gray-700 hover:bg-gray-100'
                    : 'text-gray-400 cursor-not-allowed'
                )}
              >
                <span className="sr-only">Last</span>
                <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path fillRule="evenodd" d="M4.293 15.707a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L8.586 10l-4.293 4.293a1 1 0 000 1.414zm6 0a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L14.586 10l-4.293 4.293a1 1 0 000 1.414z" clipRule="evenodd" />
                </svg>
              </button>
            </nav>
          </div>
        </div>
      )}
    </div>
  );
}
